{
  "env": {
    "browser": true,
    "amd": true,
    "node": true,
    "es6": true
  },
  "ignorePatterns": ["node_modules", "dist", "build"],
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:prettier/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:testing-library/react",
    "plugin:@typescript-eslint/recommended"
  ],
  "parserOptions": {
    "parser": " @typescript-eslint/parser",
    "requireConfigFile": false,
    "overrides": [
      {
        "files": ["*.ts", "*.tsx"], // Your TypeScript files extension

        // As mentioned in the comments, you should extend TypeScript plugins here,
        // instead of extending them outside the `overrides`.
        // If you don't want to extend any rules, you don't need an `extends` attribute.
        "extends": [
          "plugin:@typescript-eslint/eslint-recommended",
          // Базовые правила для TypeScript
          "plugin:@typescript-eslint/recommended",
          // Правила TS, требующие инфо о типах
          "plugin:@typescript-eslint/recommended-requiring-type-checking"
        ],

        "parserOptions": {
          "project": ["./tsconfig.json"] // Specify it only for TypeScript files
        }
      }
    ],
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2022,
    "sourceType": "module"
  },
  "plugins": ["react", "prettier", "import", "@typescript-eslint"],
  "rules": {
    "indent": ["error", 2, { "SwitchCase": 1 }],
    "prettier/prettier": [
      "error",
      {
        "endOfLine": "auto"
      }
    ],
    "linebreak-style": [0, "unix"],
    "quotes": ["error", "single"],
    "semi": [2, "always"],
    "react/react-in-jsx-scope": "off",
    "react/prop-types": 0,
    "import/no-unresolved": [2, { "caseSensitive": false }],
    "react/jsx-filename-extension": [2, { "extensions": [".js", ".jsx", ".ts", ".tsx"] }],
    // "constructor-super": "off", // ts(2335) & ts(2377)
    // "getter-return": "off", // ts(2378)
    // "no-const-assign": "off", // ts(2588)
    // "no-dupe-args": "off", // ts(2300)
    // "no-dupe-class-members": "off", // ts(2393) & ts(2300)
    // "no-dupe-keys": "off", // ts(1117)
    // "no-func-assign": "off", // ts(2539)
    // "no-import-assign": "off", // ts(2539) & ts(2540)
    // "no-new-symbol": "off", // ts(2588)
    // "no-obj-calls": "off", // ts(2349)
    // "no-redeclare": "off", // ts(2451)
    // "no-setter-return": "off", // ts(2408)
    // "no-this-before-super": "off", // ts(2376)
    // "no-undef": "off", // ts(2304)
    // "no-unreachable": "off", // ts(7027)
    // "no-unsafe-negation": "off", // ts(2365) & ts(2360) & ts(2358)
    // "no-var": "error", // ts transpiles let/const to var, so no need for vars any more
    // "prefer-const": "error", // ts provides better types with const
    // "prefer-rest-params": "error", // ts provides better types with rest args over arguments
    // "prefer-spread": "error", // ts transpiles spread to apply, so no need for manual apply
    // "valid-typeof": "off", // ts(2367)
    "import/order": [
      2,
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
        "newlines-between": "always"
      }
    ]
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"],
        "moduleDirectory": ["node_modules", "src/"]
      }
    }
  }
}
